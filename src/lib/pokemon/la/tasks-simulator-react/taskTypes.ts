// Original Angular Enums/Types are defined as const objects.
// We will replicate this pattern for clarity and consistency.

// From: src/lib/pokemon/la/fixtures/pokemon.ts
export const PokemonEnum = {
  Rowlet: 1,
  Dartrix: 2,
  Decidueye: 3,
  Cyndaquil: 4,
  Quilava: 5,
  Typhlosion: 6,
  Oshawott: 7,
  Dewott: 8,
  Samurott: 9,
  Bidoof: 10,
  Bibarel: 11,
  Starly: 12,
  Staravia: 13,
  Staraptor: 14,
  Shinx: 15,
  Luxio: 16,
  Luxray: 17,
  Wurmple: 18,
  Silcoon: 19,
  Beautifly: 20,
  Cascoon: 21,
  Dustox: 22,
  Ponyta: 23,
  Rapidash: 24,
  Eevee: 25,
  Vaporeon: 26,
  Jolteon: 27,
  Flareon: 28,
  Espeon: 29,
  Umbreon: 30,
  Leafeon: 31,
  Glaceon: 32,
  Sylveon: 33,
  Zubat: 34,
  Golbat: 35,
  Crobat: 36,
  Drifloon: 37,
  Drifblim: 38,
  Kricketot: 39,
  Kricketune: 40,
  Buizel: 41,
  Floatzel: 42,
  Burmy: 43,
  Wormadam: 44,
  Mothim: 45,
  Geodude: 46,
  Graveler: 47,
  Golem: 48,
  Stantler: 49,
  Wrydeer: 50,
  Munchlax: 51,
  Snorlax: 52,
  Paras: 53,
  Parasect: 54,
  Pichu: 55,
  Pikachu: 56,
  Raichu: 57,
  Abra: 58,
  Kadabra: 59,
  Alakazam: 60,
  Chimchar: 61,
  Monferno: 62,
  Infernape: 63,
  Buneary: 64,
  Lopunny: 65,
  Cherubi: 66,
  Cherrim: 67,
  Psyduck: 68,
  Golduck: 69,
  Combee: 70,
  Vespiquen: 71,
  Scyther: 72,
  Kleavor: 73,
  Scizor: 74,
  Heracross: 75,
  MimeJr: 76,
  MrMime: 77,
  Aipom: 78,
  Ambipom: 79,
  Magikarp: 80,
  Gyarados: 81,
  Shellos: 82,
  Gastrodon: 83,
  Qwilfish: 84,
  Overqwil: 85,
  Happiny: 86,
  Chansey: 87,
  Blissey: 88,
  Budew: 89,
  Roselia: 90,
  Roserade: 91,
  Carnivine: 92,
  Petilil: 93,
  Lilligant: 94,
  Tangela: 95,
  Tangrowth: 96,
  Barboach: 97,
  Whiscash: 98,
  Croagunk: 99,
  Toxicroak: 100,
  Ralts: 101,
  Kirlia: 102,
  Gardevoir: 103,
  Gallade: 104,
  Yanma: 105,
  Yanmega: 106,
  Hippopotas: 107,
  Hippowdon: 108,
  Pachirisu: 109,
  Stunky: 110,
  Skuntank: 111,
  Teddiursa: 112,
  Ursaring: 113,
  Ursaluna: 114,
  Goomy: 115,
  Sliggoo: 116,
  Goodra: 117,
  Onix: 118,
  Steelix: 119,
  Rhyhorn: 120,
  Rhydon: 121,
  Rhyperior: 122,
  Bonsly: 123,
  Sudowoodo: 124,
  Lickitung: 125,
  Lickilicky: 126,
  Togepi: 127,
  Togetic: 128,
  Togekiss: 129,
  Turtwig: 130,
  Grotle: 131,
  Torterra: 132,
  Porygon: 133,
  Porygon2: 134,
  PorygonZ: 135,
  Gastly: 136,
  Haunter: 137,
  Gengar: 138,
  Spiritomb: 139,
  Murkrow: 140,
  Honchkrow: 141,
  Unown: 142,
  Spheal: 143,
  Sealeo: 144,
  Walrein: 145,
  Remoraid: 146,
  Octillery: 147,
  Skorupi: 148,
  Drapion: 149,
  Growlithe: 150,
  Arcanine: 151,
  Glameow: 152,
  Purugly: 153,
  Machop: 154,
  Machoke: 155,
  Machamp: 156,
  Chatot: 157,
  Duskull: 158,
  Dusclops: 159,
  Dusknoir: 160,
  Piplup: 161,
  Prinplup: 162,
  Empoleon: 163,
  Mantyke: 164,
  Mantine: 165,
  Basculin: 166,
  Basculegion: 167,
  Vulpix: 168,
  Ninetales: 169,
  Tentacool: 170,
  Tentacruel: 171,
  Finneon: 172,
  Lumineon: 173,
  Magby: 174,
  Magmar: 175,
  Magmortar: 176,
  Magnemite: 177,
  Magneton: 178,
  Magnezone: 179,
  Bronzor: 180,
  Bronzong: 181,
  Elekid: 182,
  Electabuzz: 183,
  Electivire: 184,
  Gligar: 185,
  Gliscor: 186,
  Gible: 187,
  Gabite: 188,
  Garchomp: 189,
  Nosepass: 190,
  Probopass: 191,
  Voltorb: 192,
  Electrode: 193,
  Rotom: 194,
  Chingling: 195,
  Chimecho: 196,
  Misdreavus: 197,
  Mismagius: 198,
  Cleffa: 199,
  Clefairy: 200,
  Clefable: 201,
  Sneasel: 202,
  Sneaslar: 203,
  Weavile: 204,
  Snorunt: 205,
  Glalie: 206,
  Froslass: 207,
  Cranidos: 208,
  Rampardos: 209,
  Shieldon: 210,
  Bastiodon: 211,
  Swinub: 212,
  Piloswine: 213,
  Mamoswine: 214,
  Bergmite: 215,
  Avalugg: 216,
  Snover: 217,
  Abomasnow: 218,
  Zorua: 219,
  Zoroark: 220,
  Rufflet: 221,
  Braviary: 222,
  Riolu: 223,
  Lucario: 224,
  Uxie: 225,
  Mesprit: 226,
  Azelf: 227,
  Heatran: 228,
  Regigigas: 229,
  Cresselia: 230,
  Tornadus: 231,
  Thundurus: 232,
  Landorus: 233,
  Enamorus: 234,
  Dialga: 235,
  Palkia: 236,
  Giratina: 237,
  Arceus: 238,
  Phione: 239,
  Manaphy: 240,
  Shaymin: 241,
  Darkrai: 242,
} as const;
export type Pokemon = (typeof PokemonEnum)[keyof typeof PokemonEnum];

// From: src/lib/pokemon/la/fixtures/segment.ts
export const SegmentEnum = {
  Village1: 1,
  Fieldlands1: 2,
  Village2: 3,
  Fieldlands2: 4,
  Village3: 5,
  Fieldlands3: 6,
  Village4: 7,
  Fieldlands4: 8,
  Village5: 9,
  Fieldlands5: 10,
  Village6: 11,
  Mirelands1: 12,
  Village7: 13,
  Mirelands2: 14,
  Village8: 15,
  Coastlands1: 16,
  Coastlands2: 17,
  Coastlands3: 18,
  Village9: 19,
  Highlands1: 20,
  Village10: 21,
  Icelands1: 22,
  Village11: 23,
  Fieldlands6: 24,
  Retreat1: 25,
  Icelands2: 26,
  Retreat2: 27,
  Fieldlands7: 28,
  Retreat3: 29,
  Mirelands3: 30,
  Village12: 31,
  Highlands2: 32,
  Village13: 33,
  Highlands3: 34,
} as const;
export type Segment = (typeof SegmentEnum)[keyof typeof SegmentEnum];

// From: src/lib/pokemon/la/fixtures/task.ts
export const TaskEnum = {
  Caught: 1,
  CaughtAlpha: 2,
  CaughtWithoutSpotted: 3,
  CaughtDaylight: 4,
  CaughtEvening: 5,
  CaughtNight: 6,
  CaughtLight: 7,
  CaughtHeavy: 8,
  CaughtSmall: 9,
  CaughtLarge: 10,
  CaughtSleeping: 11,
  CaughtInTheAir: 12,
  DifferentForms: 13,
  GivenFood: 14,
  Stunned: 15,
  Scared: 16,
  Evolved: 17,
  LeapOutOre: 18,
  LeapOutTree: 19,
  SeenUseStrongStyleMove: 20,
  SeenUseAgileStyleMove: 21,
  SeenUseMove: 22,
  Defeated: 23,
  DefeatedWithMoveType: 24,
  Complete: 25,
  Bidoof: 26,
  Cascoon: 27,
  Ponyta: 28,
  Eevee: 29,
  Zubat: 30,
  Drifloon: 31,
  Parasect: 32,
  Combee: 33,
  MrMime: 34,
  Blissey: 35,
  Croagunk: 36,
  Pachirisu: 37,
  Sudowoodo: 38,
  Vulpix: 39,
  Nosepass: 40,
  Chimecho: 41,
  Clefairy: 42,
  Swinub: 43,
  Arceus: 44,
} as const;
export type Task = (typeof TaskEnum)[keyof typeof TaskEnum];

// From: src/lib/pokemon/la/fixtures/move.ts
export const MoveEnum = {
  Leafage: 1,
  Roost: 2,
  AerialAce: 3,
  TripleArrows: 4,
  LeafBlade: 5,
  LeafStorm: 6,
  Ember: 7,
  QuickAttack: 8,
  FlameWheel: 9,
  InfernalParade: 10,
  Flamethrower: 11,
  Overheat: 12,
  AquaJet: 13,
  WaterPulse: 14,
  Slash: 15,
  CeaselessEdge: 16,
  AquaTail: 17,
  HydroPump: 18,
  Bite: 19,
  AirSlash: 20,
  BraveBird: 21,
  ThunderFang: 22,
  Crunch: 23,
  WildCharge: 24,
  PoisonSting: 25,
  StunSpore: 26,
  PoisonPowder: 27,
  FireBlast: 28,
  BabyDollEyes: 29,
  Thunderbolt: 30,
  Psychic: 31,
  DarkPulse: 32,
  IceBeam: 33,
  FairyWind: 34,
  Gust: 35,
  AirCutter: 36,
  CrossPoison: 37,
  LeechLife: 38,
  Confusion: 39,
  Hypnosis: 40,
  MysticalFire: 41,
  SelfDestruct: 42,
  XScissor: 43,
  StruggleBug: 44,
  BugBuzz: 45,
  SilverWind: 46,
  Rollout: 47,
  RockSlide: 48,
  StealthRock: 49,
  DoubleEdge: 50,
  PsyshieldBash: 51,
  Extrasensory: 52,
  Rest: 53,
  Absorb: 54,
  Spore: 55,
  Venoshock: 56,
  ThunderShock: 57,
  IronTail: 58,
  Thunder: 59,
  Teleport: 60,
  CalmMind: 61,
  PsychoCut: 62,
  Recover: 63,
  FlareBlitz: 64,
  RagingFury: 65,
  DrainingKiss: 66,
  CloseCombat: 67,
  PetalDance: 68,
  ZenHeadbutt: 69,
  StoneAxe: 70,
  DoubleHit: 71,
  Mimic: 72,
  Splash: 73,
  Hurricane: 74,
  MudBomb: 75,
  BarbBarrage: 76,
  SoftBoiled: 77,
  EnergyBall: 78,
  AcidSpray: 79,
  VictoryDance: 80,
  AncientPower: 81,
  MudSlap: 82,
  NastyPlot: 83,
  DazzlingGleam: 84,
  SwordsDance: 85,
  Spark: 86,
  PoisonGas: 87,
  Bulldoze: 88,
  HeadlongRush: 89,
  AcidArmor: 90,
  IronHead: 91,
  DragonPulse: 92,
  Shelter: 93,
  GigaImpact: 94,
  Moonblast: 95,
  WoodHammer: 96,
  Tackle: 97,
  TriAttack: 98,
  HyperBeam: 99,
  Astonish: 100,
  ShadowBall: 101,
  Hex: 102,
  Snarl: 103,
  Liquidation: 104,
  Blizzard: 105,
  ChargeBeam: 106,
  FireFang: 107,
  PlayRough: 108,
  RockSmash: 109,
  BulletPunch: 110,
  BulkUp: 111,
  Bubble: 112,
  WaveCrash: 113,
  PoisonJab: 114,
  FirePunch: 115,
  ThunderWave: 116,
  FlashCannon: 117,
  ThunderPunch: 118,
  Twister: 119,
  DragonClaw: 120,
  Outrage: 121,
  IronDefense: 122,
  PowerGem: 123,
  EarthPower: 124,
  Chloroblast: 125,
  OminousWind: 126,
  DireClaw: 127,
  IceFang: 128,
  IcicleCrash: 129,
  HeadSmash: 130,
  IceShard: 131,
  HighHorsepower: 132,
  MountainGale: 133,
  PowderSnow: 134,
  BitterMalice: 135,
  EsperWing: 136,
  AuraSphere: 137,
  MysticalPower: 138,
  MagmaStorm: 139,
  LunarBlessing: 140,
  BleakwindStorm: 141,
  WildboltStorm: 142,
  SandsearStorm: 143,
  SpringtideStorm: 144,
  RoarOfTime: 145,
  SpacialRend: 146,
  ShadowClaw: 147,
  ShadowForce: 148,
  TakeHeart: 149,
  SeedFlare: 150,
  DarkVoid: 151,
} as const;
export type Move = (typeof MoveEnum)[keyof typeof MoveEnum];

// From: src/lib/pokemon/la/fixtures/move-type.ts
export const MoveTypeEnum = {
  Fire: 1,
  Water: 2,
  Electric: 3,
  Grass: 4,
  Ice: 5,
  Fighting: 6,
  Poison: 7,
  Ground: 8,
  Flying: 9,
  Psychic: 10,
  Bug: 11,
  Rock: 12,
  Ghost: 13,
  Dragon: 14,
  Dark: 15,
  Steel: 16,
  Fairy: 17,
} as const;
export type MoveType = (typeof MoveTypeEnum)[keyof typeof MoveTypeEnum];

// From: src/lib/pokemon/la/fixtures/language.ts
export const LanguageEnum = {
  Ja: 1,
  En: 2,
} as const;
export type Language = (typeof LanguageEnum)[keyof typeof LanguageEnum];

// From: src/lib/pokemon/la/tasks-simulator/points-by-segment.ts
export type PointsBySegment = Record<Segment, { increased: number; total: number }>;

// From: src/lib/pokemon/la/fixtures/pokedex.ts
export interface PokedexTask {
  readonly id: Task;
  readonly option?: Move | MoveType;
  readonly reward: number;
  readonly requirements: number[];
}

export type PokedexData = Record<
  Pokemon,
  {
    tasks: PokedexTask[];
  }
>;

// It might be useful to have a string version of Task IDs for Jotai atom keys
// if we decide to use atomFamily with string keys.
export type TaskIdString = `${Task}-${Move | MoveType | 'none'}`;

// Represents the progress of a single task across different segments
export type TaskProgress = Record<Segment, number>;

// Represents the progress of all tasks for a single Pokemon
export type PokemonTasksProgress = Map<TaskIdString, TaskProgress>;

// Represents the progress of all tasks for all Pokemon
export type AllPokemonTasksProgress = Map<Pokemon, PokemonTasksProgress>;

// Dictionary structure (simplified for now, can be expanded)
export interface DictionaryEntry {
  pokemon: (id: Pokemon) => string;
  task: (id: Task, option?: Move | MoveType) => string;
  segment: (id: Segment) => string;
  // Add other dictionary methods as needed
}

export type Dictionary = Record<string, DictionaryEntry>; // Assuming language code as key for simplicity
